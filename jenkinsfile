def repoScript = '''import groovy.json.JsonSlurper
def get = new URL("https://api.github.com/users/nirgeier/repos").openConnection();
def getRC = get.getResponseCode();

if (getRC.equals(200)) {
    def json = get.inputStream.withCloseable { inStream ->
        new JsonSlurper().parse( inStream as InputStream )
    }

    def item = json;
    def names = [];

    item.each { repo ->
        names.push(repo.name);
    }   
    return names;
}''';

//Script for the branch, you can reference the previous script value witn the "REPO" variable
def branchScript = '''import groovy.json.JsonSlurper
def getBranches = new URL("https://api.github.com/repos/nirgeier/" + REPO + "/branches").openConnection();
def getRCBranches = getBranches.getResponseCode();

if (getRCBranches.equals(200)) {
   def jsonBr = getBranches.inputStream.withCloseable { inStream ->
           new JsonSlurper().parse( inStream as InputStream )
   }

    def itemBr = jsonBr;
    def namesBr = [];

    itemBr.each { branch ->
        namesBr.push(branch.name);
    } 
    return namesBr;
}''';

pipeline {
    agent any
        stages {
            stage('Parameters'){
                steps {
                    script {
                    properties([
                            //Creating the parameters, make sure you have Active Choice plugin installed
                            parameters([
                                [$class: 'ChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Select the Environemnt from the Dropdown List', 
                                    filterLength: 1, 
                                    filterable: false, 
                                    //Important for identify it in the cascade choice parameter and the params. values
                                    name: 'REPO', 
                                    script: [
                                        $class: 'GroovyScript', 
                                        fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "return['Could not get The Repos']"
                                        ], 
                                        script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            //Calling local variable with the script as a string
                                            script: "${repoScript}"
                                            
                                        ]
                                    ]
                                ],
                                [$class: 'CascadeChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Select the BRanch from the Dropdown List',
                                    name: 'BRANCH', 
                                    referencedParameters: 'REPO', 
                                    script: 
                                        [$class: 'GroovyScript', 
                                        fallbackScript: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script: "return['Could not get Branch from the Repo']"
                                                ], 
                                        script: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script: "${branchScript}"
                                        ] 
                                    ]
                                ]
                            ])
                        ])
                    }
                }
            }
             stage('checkout scm') {
                steps {
                    //Mkdir if not exist for the repo
                    sh "mkdir -p ${REPO}"
                    //Changing workdir to the previous dir created
                    dir(path: "${REPO}"){
                        git branch: "${params.BRANCH}", 
                            poll: false, 
                            url: "https://github.com/nirgeier/${params.REPO}.git"
                    }
                }
            }
        }   
}



pipeline{
agent any
stages{

   
     stage('get build Params User Input') {
        steps{
            script{

                liste = readFile 'branch.txt'
                echo "please click on the link here to chose the branch to build"
                env.BRANCH_SCOPE = input message: 'Please choose the branch to build ', ok: 'Validate!',
                        parameters: [choice(name: 'BRANCH_NAME', choices: "${liste}", description: 'Branch to build?')]


            }
        }
    } 
    stage("checkout the branch"){
        steps{
            echo "${env.BRANCH_SCOPE}"
            git  credentialsId: 'ea346a50-8bd8-419d-8af0-30960441fcd7', url: 'ssh://jenkins@git.company.com/usr/company/repositories/repo.git'
            sh "git checkout -b build ${env.BRANCH_NAME}"
        }
    }
    stage(" exec maven build"){
        steps{
            withMaven(maven: 'M3', mavenSettingsConfig: 'mvn-setting-xml') {
               sh "mvn clean install "
            }
        }
    }
    stage("clean workwpace"){
        steps{
            cleanWs()
        }
    }
}